#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üõ°Ô∏è Bitrix24 Security Audit System - Main Application
–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∞—É–¥–∏—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ë–∏—Ç—Ä–∏–∫—Å24
Author: AKUMA
"""

from flask import Flask, render_template, request, redirect, url_for, flash, jsonify, session
from flask_login import LoginManager, login_user, logout_user, login_required, current_user
from werkzeug.utils import secure_filename
from datetime import datetime
import os
import sys
import json
import subprocess
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π
sys.path.append(os.path.join(os.path.dirname(__file__), 'app'))
from models import init_db, User, Project, VulnerabilityScan, SystemReport, AuditLog, db

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__, template_folder='app/templates', static_folder='app/static')
app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', 'akuma_super_secret_key_2024')
# –°–æ–∑–¥–∞—ë–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
db_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'app', 'database', 'bitrix_audit.db')
app.config['SQLALCHEMY_DATABASE_URI'] = f'sqlite:///{db_path}'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['UPLOAD_FOLDER'] = 'uploads'
app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024  # 16MB max file size

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Flask-Login
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'login'
login_manager.login_message = '–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.'
login_manager.login_message_category = 'warning'

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
init_db(app)

def log_audit_action(action, resource, resource_id=None, details=None):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        log = AuditLog(
            user_id=current_user.id if current_user.is_authenticated else None,
            action=action,
            resource=resource,
            resource_id=resource_id,
            details=details,
            ip_address=request.remote_addr,
            user_agent=request.headers.get('User-Agent', '')
        )
        db.session.add(log)
        db.session.commit()
    except Exception as e:
        print(f"Audit log error: {e}")

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    if not current_user.is_authenticated:
        return redirect(url_for('login'))
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats = {
        'total_projects': Project.query.count(),
        'total_scans': VulnerabilityScan.query.count(),
        'total_reports': SystemReport.query.count(),
        'total_users': User.query.count()
    }
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if current_user.is_admin():
        recent_projects = Project.query.order_by(Project.created_at.desc()).limit(5).all()
    else:
        recent_projects = [p for p in current_user.projects][:5]
    
    return render_template('dashboard.html', stats=stats, recent_projects=recent_projects)

@app.route('/login', methods=['GET', 'POST'])
def login():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    if current_user.is_authenticated:
        return redirect(url_for('index'))
    
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        
        user = User.query.filter_by(username=username).first()
        
        if user and user.check_password(password) and user.is_active:
            user.last_login = datetime.utcnow()
            db.session.commit()
            
            login_user(user, remember=True)
            log_audit_action('LOGIN', 'USER', user.id)
            
            next_page = request.args.get('next')
            if next_page:
                return redirect(next_page)
            return redirect(url_for('index'))
        else:
            flash('–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', 'error')
            log_audit_action('LOGIN_FAILED', 'USER', details=f'Failed login attempt for user: {username}')
    
    return render_template('auth/login.html')

@app.route('/logout')
@login_required
def logout():
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    log_audit_action('LOGOUT', 'USER', current_user.id)
    logout_user()
    flash('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã', 'info')
    return redirect(url_for('login'))

@app.route('/users')
@login_required
def users():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if not current_user.is_admin():
        flash('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞', 'error')
        return redirect(url_for('index'))
    
    users_list = User.query.all()
    return render_template('admin/users.html', users=users_list)

@app.route('/users/create', methods=['GET', 'POST'])
@login_required
def create_user():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not current_user.is_admin():
        flash('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞', 'error')
        return redirect(url_for('index'))
    
    if request.method == 'POST':
        username = request.form['username']
        email = request.form['email']
        password = request.form['password']
        role = request.form['role']
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        existing_user = User.query.filter(
            (User.username == username) | (User.email == email)
        ).first()
        
        if existing_user:
            flash('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –∏–ª–∏ email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', 'error')
        else:
            user = User(username=username, email=email, role=role)
            user.set_password(password)
            
            db.session.add(user)
            db.session.commit()
            
            log_audit_action('CREATE', 'USER', user.id, f'Created user: {username}')
            flash(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ', 'success')
            return redirect(url_for('users'))
    
    return render_template('admin/create_user.html')

@app.route('/projects')
@login_required
def projects():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤"""
    if current_user.is_admin():
        projects_list = Project.query.all()
    else:
        projects_list = current_user.projects
    
    return render_template('projects/list.html', projects=projects_list)

@app.route('/projects/create', methods=['GET', 'POST'])
@login_required
def create_project():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"""
    if request.method == 'POST':
        name = request.form['name']
        description = request.form['description']
        url = request.form['url']
        
        project = Project(
            name=name,
            description=description,
            url=url,
            created_by_id=current_user.id
        )
        
        db.session.add(project)
        db.session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–æ–µ–∫—Ç–∞
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –∫ –ø—Ä–æ–µ–∫—Ç—É, –µ—Å–ª–∏ –æ–Ω –Ω–µ –∞–¥–º–∏–Ω
        if not current_user.is_admin():
            project.users.append(current_user)
        
        db.session.commit()
        
        log_audit_action('CREATE', 'PROJECT', project.id, f'Created project: {name}')
        flash(f'–ü—Ä–æ–µ–∫—Ç "{name}" —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ', 'success')
        return redirect(url_for('project_detail', project_id=project.id))
    
    return render_template('projects/create.html')

@app.route('/projects/<int:project_id>')
@login_required
def project_detail(project_id):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ"""
    project = Project.query.get_or_404(project_id)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
    if not current_user.can_access_project(project_id):
        flash('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ø—Ä–æ–µ–∫—Ç—É', 'error')
        return redirect(url_for('projects'))
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
    latest_vuln_scan = project.get_latest_vulnerability_scan()
    latest_system_report = project.get_latest_system_report()
    
    return render_template('projects/detail.html', 
                         project=project,
                         latest_vuln_scan=latest_vuln_scan,
                         latest_system_report=latest_system_report)

@app.route('/projects/<int:project_id>/scan', methods=['POST'])
@login_required
def start_vulnerability_scan(project_id):
    """–ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π"""
    project = Project.query.get_or_404(project_id)
    
    if not current_user.can_access_project(project_id):
        return jsonify({'error': 'Access denied'}), 403
    
    try:
        # –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–µ—Ä–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        scanner_path = os.path.join(os.getcwd(), 'bitrix24_vulnerability_scanner.py')
        result = subprocess.run([
            'python3', scanner_path, project.url
        ], capture_output=True, text=True, timeout=300)
        
        if result.returncode == 0:
            # –ü–æ–∏—Å–∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –æ—Ç—á—ë—Ç–∞
            report_files = [f for f in os.listdir('.') if f.startswith('bitrix24_scan_report_')]
            if report_files:
                latest_report = max(report_files, key=os.path.getctime)
                
                # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ—Ç—á—ë—Ç–∞
                with open(latest_report, 'r', encoding='utf-8') as f:
                    scan_data = json.load(f)
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                scan = VulnerabilityScan(
                    project_id=project_id,
                    scan_data=json.dumps(scan_data),
                    target_url=project.url,
                    status='completed'
                )
                
                db.session.add(scan)
                db.session.commit()
                
                # –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ –≤ –ø–∞–ø–∫—É reports
                os.rename(latest_report, f'reports/{latest_report}')
                
                log_audit_action('SCAN', 'PROJECT', project_id, 'Vulnerability scan completed')
                return jsonify({'success': True, 'scan_id': scan.id})
        
        return jsonify({'error': 'Scan failed'}), 500
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/projects/<int:project_id>/upload_report', methods=['POST'])
@login_required
def upload_system_report(project_id):
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞"""
    project = Project.query.get_or_404(project_id)
    
    if not current_user.can_access_project(project_id):
        flash('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ø—Ä–æ–µ–∫—Ç—É', 'error')
        return redirect(url_for('projects'))
    
    if 'report_file' not in request.files:
        flash('–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω', 'error')
        return redirect(url_for('project_detail', project_id=project_id))
    
    file = request.files['report_file']
    report_date_str = request.form['report_date']
    
    if file.filename == '':
        flash('–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω', 'error')
        return redirect(url_for('project_detail', project_id=project_id))
    
    if file and file.filename.endswith('.json'):
        try:
            # –ß—Ç–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è JSON
            file_content = file.read().decode('utf-8')
            report_data = json.loads(file_content)
            
            # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã
            report_date = datetime.strptime(report_date_str, '%Y-%m-%dT%H:%M')
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞
            system_report = SystemReport(
                project_id=project_id,
                report_data=file_content,
                uploaded_by_id=current_user.id,
                report_date=report_date,
                filename=secure_filename(file.filename)
            )
            
            db.session.add(system_report)
            db.session.commit()
            
            log_audit_action('UPLOAD', 'SYSTEM_REPORT', system_report.id, f'Uploaded system report: {file.filename}')
            flash('–°–∏—Å—Ç–µ–º–Ω—ã–π –æ—Ç—á—ë—Ç –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ', 'success')
            
        except Exception as e:
            flash(f'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}', 'error')
    else:
        flash('–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ JSON —Ñ–∞–π–ª—ã', 'error')
    
    return redirect(url_for('project_detail', project_id=project_id))

@app.route('/projects/<int:project_id>/delete', methods=['POST'])
@login_required
def delete_project(project_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if not current_user.is_admin():
        return jsonify({'error': 'Access denied'}), 403
    
    project = Project.query.get_or_404(project_id)
    
    try:
        # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        VulnerabilityScan.query.filter_by(project_id=project_id).delete()
        SystemReport.query.filter_by(project_id=project_id).delete()
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç
        project_name = project.name
        db.session.delete(project)
        db.session.commit()
        
        log_audit_action('DELETE', 'PROJECT', project_id, f'Deleted project: {project_name}')
        return jsonify({'success': True, 'message': f'–ü—Ä–æ–µ–∫—Ç "{project_name}" —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ'})
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': str(e)}), 500

@app.route('/api/stats')
@login_required
def api_stats():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if current_user.is_admin():
        projects = Project.query.all()
    else:
        projects = current_user.projects
    
    stats = {
        'total_projects': len(projects),
        'active_projects': len([p for p in projects if p.status == 'active']),
        'total_vulnerabilities': 0,
        'critical_vulnerabilities': 0,
        'vulnerability_trends': []
    }
    
    for project in projects:
        vuln_stats = project.get_vulnerability_stats()
        stats['total_vulnerabilities'] += vuln_stats.get('total', 0)
        stats['critical_vulnerabilities'] += vuln_stats.get('critical', 0)
    
    return jsonify(stats)

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5001)
